# FastAPI's routing module, dependency injection, and HTTP exception class
from datetime import (
    datetime,
    timedelta,
    timezone,
)

from fastapi import APIRouter, Depends
from sqlalchemy.orm import selectinload

# SQLModel's session and query builder
from sqlmodel import Session, select

from practice.config import (
    ACCESS_TOKEN_EXPIRE_MINUTES,
)
from practice.lib import (
    GetSession,
    api_response,
)
from practice.lib.db import get_session

# Your custom user model and schema
from practice.mvc.core.security import (
    create_access_token,
    exist_user,
    hash_password,
    require_admin,
    require_permission,
    require_signin,
    verify_password,
)
from practice.mvc.models.roleModel import (
    Role,
)
from practice.mvc.models.userModel import (
    LoginRequest,
    RegisterUser,
    User,
    UserRead,
)

# Create a router with prefix `/user` and group tag `user`
router = APIRouter(tags=["auth"])


@router.post("/init", response_model=UserRead)
def initialize_first_user(
    request: RegisterUser,
    session: GetSession,
):
    # Prevent rerun if roles already exist
    existing_roles = session.exec(select(Role)).all()
    if existing_roles:
        return api_response(
            400,
            "Initialization already done",
        )

    # Create roles
    admin_role = Role(
        title="admin",
        permissions=["all"],
    )
    user_role = Role(
        title="user",
        permissions=["user"],
    )

    session.add(admin_role)
    session.add(user_role)
    session.commit()
    session.refresh(admin_role)  # to get ID

    # Create first user with admin role
    hashed_password = hash_password(request.password)
    user = User(**request.model_dump())
    user = User(
        full_name=request.full_name,
        email=request.email,
        password=hashed_password,
        role_id=admin_role.id,
    )
    session.add(user)
    session.commit()
    session.refresh(user)

    user_read = UserRead.model_validate(user)
    return api_response(
        200,
        "Initialized admin user and roles",
        user_read,
    )


@router.post("/register", response_model=UserRead)  # ✅ Added "@"
def register_user(
    request: RegisterUser,
    session: GetSession,
):
    db_user = exist_user(session, email=request.email)
    if db_user:
        return api_response(
            400,
            "This user already exist",
        )
    user = User(**request.model_dump())  # Similar to new User(req.body) in Mongoose
    hashed_password = hash_password(user.password)
    user.password = hashed_password
    session.add(user)
    session.commit()
    session.refresh(user)  # Refresh to get updated fields (e.g., autogenerated ID)
    user_read = UserRead.model_validate(user)  # ✅ Convert User → UserRead
    return api_response(
        200,
        "User Registered Successfully",
        user_read,
    )


@router.post("/login", response_model=dict)
def login_user(
    request: LoginRequest,
    session: GetSession,
):
    user = session.exec(
        select(User).options(selectinload(User.role)).where(User.email == request.email)
    ).first()
    print(user.role)
    if not user:
        return api_response(404, "User not found")

    if not verify_password(request.password, user.password):
        return api_response(401, "Incorrect password")

    if not user.is_active:
        return api_response(403, "User account is disabled")

    # Handle missing role gracefully
    role_title = user.role.title if user.role else None
    permissions = user.role.permissions if user.role and user.role.permissions else []

    user_data = {
        "id": user.id,
        "email": user.email,
        "role": role_title,
        "permissions": permissions,
    }

    access_token = create_access_token(user_data=user_data)
    refresh_token = create_access_token(user_data=user_data, refresh=True)

    exp_time = datetime.now(timezone.utc) + timedelta(
        minutes=ACCESS_TOKEN_EXPIRE_MINUTES
    )

    user_read = UserRead.model_validate(user)

    content = {
        "message": "Login successful",
        "token_type": "bearer",
        "access_token": access_token,
        "refresh_token": refresh_token,
        "user": user_read,
        "exp": exp_time.isoformat(),
    }

    return api_response(200, "Login successful", content)


@router.get("/testauth", response_model=dict)
def test_auth(
    user: dict = Depends(require_signin),
):
    return api_response(
        200,
        "Token is valid",
        {"user": user},
    )


@router.get("/testadmin")
def get_admin_data(
    user=Depends(require_admin),
):
    return {"message": f"Hello Admin {user['email']}"}


@router.get("/testpermission")
def get_admin_data(
    user=Depends(require_permission("all")),
):
    return {"message": f"Hello Admin {user['email']}"}
