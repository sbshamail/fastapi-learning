# FastAPI's routing module, dependency injection, and HTTP exception class
from datetime import datetime, timedelta, timezone
from fastapi import APIRouter, Depends, HTTPException


# SQLModel's session and query builder
from sqlmodel import Session, select

# Your custom user model and schema
from practice.config import ACCESS_TOKEN_EXPIRE_MINUTES
from practice.mvc.core.security import create_access_token, exist_user, hash_password, verify_password
from practice.mvc.models.userModel import LoginRequest, User, RegisterUser, UserRead

# Session provider (dependency injection for DB access)
from practice.lib.db import get_session

# Your own standard response formatter
from practice.lib import api_response,db_dependency

# Create a router with prefix `/user` and group tag `user`
router = APIRouter(prefix="/user", tags=["user"])

@router.post("/register", response_model=UserRead)  # ✅ Added "@"
def register_user(request: RegisterUser,session: Session = Depends(get_session) ):
    db_user = exist_user(session, email=request.email)
    if db_user:
        return api_response(400, "This user already exist")
    user = User(**request.model_dump())# Similar to new User(req.body) in Mongoose
    hashed_password = hash_password(user.password)
    user.password = hashed_password
    session.add(user)
    session.commit()
    session.refresh(user)# Refresh to get updated fields (e.g., autogenerated ID)
    user_read = UserRead.model_validate(user)  # ✅ Convert User → UserRead
    return api_response(200, "User Registered Successfully", user_read)


@router.post("/login", response_model=dict)
def login_user(request: LoginRequest, session: Session = Depends(get_session)):
    user = session.exec(select(User).where(User.email == request.email)).first()
    
    if not user:
        return api_response(404, "User not found")
    
    if not verify_password(request.password, user.password):
        return api_response(401, "Incorrect password")
    if not user.is_active:
        return api_response(403, "User account is disabled")


    access_token = create_access_token(
        user_data={"email": user.email, "id": user.id},
    )
    refresh_token = create_access_token(
        user_data={"email": user.email, "id": user.id},
        refresh=True,
    )

    exp_time = datetime.now(timezone.utc) + timedelta(
        minutes=ACCESS_TOKEN_EXPIRE_MINUTES
    )

   
    user_read = UserRead.model_validate(user)
    content={
            "message": "Login successful",
            "token_type": "bearer",
            "access_token": access_token,
            "refresh_token": refresh_token,
            "user": user_read,
            "exp": exp_time.isoformat(),
        }

    return api_response(200, "Login successful",content)
# ✅ READ ALL
@router.get("/all")  # no response_model
def get_users(session: Session = Depends(get_session)):
    users = session.exec(select(User)).all() # SELECT * FROM user
    if not users or len(users) == 0:
      return api_response(404, "User not found")
   
    return api_response(200, "Users fetched", users, len(users))  


# ✅ READ ONE
@router.get("/{user_id}", response_model=User)
def get_user(user_id: int, session: Session = Depends(get_session)):
    user = session.get(User, user_id)# Like findById
    if not user:
        # raise HTTPException(status_code=404, detail="User not found")
        return api_response(404, "User not found")
    return api_response(200, "User Found", user)


# ✅ DELETE
@router.delete("/{user_id}", response_model=dict)
def delete_user(user_id: int, session: Session = Depends(get_session)):
    user = session.get(User, user_id)
    if not user:
        return api_response(404, "User not found")
    
    session.delete(user)
    session.commit()
    return api_response(404, f"User {user_id} deleted")